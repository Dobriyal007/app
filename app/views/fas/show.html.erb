<div class="container">
	<h2 class="basic-head text-center bg-primary p-3 my-3">Barcode Details</h2>
	<div class="mb-2">
    <% if flash.now[:alert] %>
      <div class="alert alert-danger d-flex align-items-center" role="alert">
        <%= flash.now[:alert] %>
      </div>
    <% end %>
  </div>
	<table class="table table-striped table-bordered align-middle text-center">
	  <tbody>
	    <tr>
	      <th style="width: 80px">Sr No.</th>
	      <th>Date</th>
	      <th>Time</th>
	      <th>Line</th>
	      <th>Model</th>
	      <th class="text-center">Barcode<p class="m-0"><small class="text-muted">After scan press tab button.</small></p></th>
	    </tr>
	    <%= form_with(model: @fa, url: submit_barcode_data_fas_path(@fa), method: :post, data: { turbo: false}) do |form| %>
	        <% @fa.qty.times do |serial_number| %>
	          <tr>
	            <td><%= serial_number + 1 %></td>
	            <td><%= @fa.date&.strftime('%Y-%m-%d') %></td>
	            <td><%= @fa.time&.strftime('%H:%M:%S') %></td>
	            <td><%= @fa.Line %></td>
	            <td><%= @fa.Model %></td>
	            <td><%= form.text_field "barcodes[][value]", class: "form-control", placeholder: "Enter Barcode", autocomplete: 'off', data: { model: @fa.Model } %></td>
	          </tr>
	        <% end %>
	        <tr>
	          <td colspan="6" class="text-center">
	            <%= form.submit "Submit", class: "btn btn-large btn-primary" %>
	          </td>
	        </tr>
	      <% end %>
	  </tbody>
	</table>
	<div class="d-flex align-items-center justify-content-between">
	  <%= link_to "<< Back", new_fa_path, class: "btn btn-sm btn-secondary", style: "margin-right: 500px" %>
	  <%= link_to "Go to List >>", root_path, class: "btn btn-sm btn-secondary", style: "color: white;" %>
	</div>
</div>
<!-- Include jQuery library -->
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

<script>
  $(document).ready(function () {

    $(document).on('keydown', '.form-control', function (e) {
      const currentInput = $(this);
      const currentValue = currentInput.val();

      // Get the model value for the current input field
      const currentModel = currentInput.data('model'); // Assuming data-model attribute contains the model information

      // Arrays of models with different input lengths
      const modelsLength30 = ['SSE-SDS5', 'OPO-SACJ1', 'OPO-SHN6', 'OPO-SCP5', 'OPO-SDY5', 'OPO-SHC9'];
      const modelsLength14 = ['BBK-SJV5', 'BBK-SHX4', 'BBK-SJQ6', 'BBK-SHV2', 'BBK-SJV6', 'BBK-SJV5', 'BBK-SKC1'];
      const modelsLength20 = ['TSNSBC4', 'TSNSJY4'];
      const modelsLength28 = ['SSE-SFW9', 'SSE-SKP7', 'SSE-SCT9', 'SSE-SJA4', 'SSE-SGM1'];
      const modelsLength24 = ['MIX-SHR5', 'MIX-SJZ5', 'MIX-SKS1'];
      const modelsLength53 = ['MTO-JU8'];
      const modelsLength25 = ['OPO-SKM1', 'OPO-SHV3', 'OPO-SJB4', 'OPO-SHX3'];

      // Check if the current input length is above the specified maximum length
      const maxLength = modelsLength30.includes(currentModel) ? 30 :
                       modelsLength14.includes(currentModel) ? 14 :
                       modelsLength20.includes(currentModel) ? 20 :
                       modelsLength28.includes(currentModel) ? 28 :
                       modelsLength24.includes(currentModel) ? 24 :
                       modelsLength53.includes(currentModel) ? 53 :
                       modelsLength25.includes(currentModel) ? 25 : 55;

      // Move focus to the next input field in the same row
      if (currentValue.length >= maxLength) {
        const currentRow = currentInput.closest('tr');
        const nextInput = currentRow.next().find('.form-control');

        // Move to the next row
        if (nextInput.length > 0) {
          nextInput.focus();
        }
      }
    });
  });
</script>


